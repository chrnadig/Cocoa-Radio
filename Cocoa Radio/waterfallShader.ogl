uniform sampler2D texture;

// Number of frames of persistance (between 2 and 4 is good)
uniform int currentLine;
uniform int height;
uniform int average;
uniform int persistance;
uniform float bottomValue;
uniform float range;

vec4 rainbow(float value)
{
	vec4 rgb;
    if (value >= 1.0) {
		rgb.r = 1.0;
		rgb.g = 1.0;
		rgb.b = 1.0;
    } else if( value >= 0.75 ) {
		// y -> r
		rgb.r = 1.0;
		rgb.g = 1.0 - 4.0 * (value - 0.75);
		rgb.b = 0.0;
	} else if( value >= 0.50 ) {
		// g -> y
		rgb.r = 4.0 * (value -  0.5);
		rgb.g = 1.0;
		rgb.b = 0.0;
	} else if( value >= 0.25 ) {
		// c -> g
		rgb.r = 0.0;
		rgb.g = 1.0;
		rgb.b = 1.0 - 4.0 * (value - 0.25);
	} else if (value > 0.0) {
        // b -> c
        rgb.r = 0.0;
        rgb.g = 4.0 * value;
        rgb.b = 1.0;
    } else {
		rgb.r = 0.0;
		rgb.g = 0.0;
		rgb.b = 0.0;
    }
    rgb.a = 1.0;
	return rgb;
}

float getValue(vec2 tex)
{
    float value = 0.;
    float inputY = tex.y;
    float deltaY = 1. / float(height);
    
    for(int i = 0; i < average; i++) {
        // For each sample, look into the past i samples
        tex.y = inputY - (deltaY * float(i));
        
        // Wrap-around the height of the texture
        tex.y = mod(tex.y, 1.0);
        
        // Retreive the sample
        float temp = texture2D(texture, tex).a;
        
        // Devide by the number of samples and accumulate
        value += temp * (1.0 / float(average));
    }
    
    return value;
}

void main()
{
    // Convert the normalized height coordinate into pixels
    vec2 tex;
    tex.x = gl_TexCoord[0].x;
    tex.y = gl_TexCoord[0].y;
    
    float value = getValue(tex);
    float zeroCorrected = value - bottomValue;
    float scaled = zeroCorrected / range;
    
	gl_FragColor   = rainbow(scaled);
    gl_FragColor.a = 1.0 / float(persistance);
}
